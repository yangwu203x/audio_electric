<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.audio.electric.mapper.SearchMapper">

    <sql id="friend">
        u.id,u.photo,u.username,u.nickname,vul.level,vul.logo
    </sql>
    <sql id="condition">
        <if test="username != null and &amp;&amp; != username.trim()">
            and u.username like CONCAT('%',#{username},'%')
        </if>
        <if test="nickname != null and &amp;&amp; != nickname.trim()">
            and u.nickname like CONCAT('%',#{nickname},'%')
        </if>
        <if test="name != null and &amp;&amp; != name.trim()">
            and u.name like CONCAT('%',#{name},'%')
        </if>
    </sql>
    <select id="searchAttentionUser" parameterType="User" resultType="map">
        select
        <include refid="friend"/>
        from
        user u left join attention a on u.id = a.be_user_id
        left join v_user_level vul on vul.user_id = u.id
        <where>
            a.user_id = #{id}
            <include refid="condition"/>
        </where>
    </select>

    <select id="searchFriends" parameterType="User" resultType="map">
        select <include refid="friend"/> from
        user u left join v_user_level vul on vul.user_id = u.id
        <where>
            <include refid="condition"/>
        </where>
    </select>

    <!--作品名或者作者昵称或备注来搜索动态-->
    <select id="searchDynamic" parameterType="map" resultType="map">
        select * from portfolio
    </select>
    <select id="searchSong" parameterType="map" resultType="map">
      select * from song
    </select>

    <select id="getSongType" resultType="map">

    </select>

    <select id="getSong" resultType="SongResponse">
     select
          song.id as id,song.song_no as songId,song.song_name as name,song.spell,record.order_time as orderTime,
          song.singer_name as singerName,song.singer_id as singerId,singer.singer_pinyin as singerPinyin
      from db_songs as song
      left join db_singers as singer on substring_index(song.singer_id,',', 1) = singer.id
      left join song_order as record on record.song_id = song.id
      <if test="date != null">
        where song.update_date > #{date}
      </if>
        order by song.id asc
    </select>
    <select id="getClassicSong" parameterType="string" resultType="integer">
        select s.id as songId from
        db_songs s
            where s.classic_song =1
        <if test="date != null">
            and s.update_date > #{date}
        </if>
    </select>

    <select id="getHotSong" parameterType="string" resultType="integer">
        select song_id as songId from hot_song
    </select>
    <select id="getChildSong" parameterType="string" resultType="integer">
        select s.id as songId
        from  db_songs s
        where s.theme_song = #{enumValueId}
        <if test="date != null">
            and s.update_date > #{date}
        </if>
    </select>

    <select id="getSongTheme" parameterType="string" resultType="EnumValue">
        select ev.id, ev.name  from enum_type et left join enum_value ev on et.id = ev.enum_type_id where et.type_name = 'songtheme'
    </select>
</mapper>