// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Callback.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package general;

/**
 * Provides type-specific helper functions.
 **/
public final class TomPrxHelper extends Ice.ObjectPrxHelperBase implements TomPrx
{
    private static final String __addClient_name = "addClient";

    public void addClient(Ice.Identity ident, String userId)
    {
        addClient(ident, userId, null, false);
    }

    public void addClient(Ice.Identity ident, String userId, java.util.Map<String, String> __ctx)
    {
        addClient(ident, userId, __ctx, true);
    }

    private void addClient(Ice.Identity ident, String userId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_addClient(begin_addClient(ident, userId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, String userId)
    {
        return begin_addClient(ident, userId, null, false, false, null);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, String userId, java.util.Map<String, String> __ctx)
    {
        return begin_addClient(ident, userId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, String userId, Ice.Callback __cb)
    {
        return begin_addClient(ident, userId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, String userId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addClient(ident, userId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, String userId, Callback_Tom_addClient __cb)
    {
        return begin_addClient(ident, userId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, String userId, java.util.Map<String, String> __ctx, Callback_Tom_addClient __cb)
    {
        return begin_addClient(ident, userId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, 
                                           String userId, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_addClient(ident, userId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, 
                                           String userId, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addClient(ident, userId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, 
                                           String userId, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_addClient(ident, userId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, 
                                           String userId, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addClient(ident, userId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_addClient(Ice.Identity ident, 
                                            String userId, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addClient(ident, 
                               userId, 
                               __ctx, 
                               __explicitCtx, 
                               __synchronous, 
                               new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_addClient(Ice.Identity ident, 
                                            String userId, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__addClient_name, __cb);
        try
        {
            __result.prepare(__addClient_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Ice.Identity.__write(__os, ident);
            __os.writeString(userId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_addClient(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __addClient_name);
    }

    private static final String __addMsg_name = "addMsg";

    public void addMsg(Ice.Identity ident, Message msg)
    {
        addMsg(ident, msg, null, false);
    }

    public void addMsg(Ice.Identity ident, Message msg, java.util.Map<String, String> __ctx)
    {
        addMsg(ident, msg, __ctx, true);
    }

    private void addMsg(Ice.Identity ident, Message msg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_addMsg(begin_addMsg(ident, msg, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_addMsg(Ice.Identity ident, Message msg)
    {
        return begin_addMsg(ident, msg, null, false, false, null);
    }

    public Ice.AsyncResult begin_addMsg(Ice.Identity ident, Message msg, java.util.Map<String, String> __ctx)
    {
        return begin_addMsg(ident, msg, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_addMsg(Ice.Identity ident, Message msg, Ice.Callback __cb)
    {
        return begin_addMsg(ident, msg, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_addMsg(Ice.Identity ident, Message msg, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addMsg(ident, msg, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_addMsg(Ice.Identity ident, Message msg, Callback_Tom_addMsg __cb)
    {
        return begin_addMsg(ident, msg, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_addMsg(Ice.Identity ident, Message msg, java.util.Map<String, String> __ctx, Callback_Tom_addMsg __cb)
    {
        return begin_addMsg(ident, msg, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_addMsg(Ice.Identity ident, 
                                        Message msg, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_addMsg(ident, msg, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_addMsg(Ice.Identity ident, 
                                        Message msg, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addMsg(ident, msg, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_addMsg(Ice.Identity ident, 
                                        Message msg, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_addMsg(ident, msg, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_addMsg(Ice.Identity ident, 
                                        Message msg, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addMsg(ident, msg, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_addMsg(Ice.Identity ident, 
                                         Message msg, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addMsg(ident, 
                            msg, 
                            __ctx, 
                            __explicitCtx, 
                            __synchronous, 
                            new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_addMsg(Ice.Identity ident, 
                                         Message msg, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__addMsg_name, __cb);
        try
        {
            __result.prepare(__addMsg_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Ice.Identity.__write(__os, ident);
            Message.__write(__os, msg);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_addMsg(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __addMsg_name);
    }

    private static final String __logoutClient_name = "logoutClient";

    public void logoutClient(Ice.Identity ident, String userId)
    {
        logoutClient(ident, userId, null, false);
    }

    public void logoutClient(Ice.Identity ident, String userId, java.util.Map<String, String> __ctx)
    {
        logoutClient(ident, userId, __ctx, true);
    }

    private void logoutClient(Ice.Identity ident, String userId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_logoutClient(begin_logoutClient(ident, userId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_logoutClient(Ice.Identity ident, String userId)
    {
        return begin_logoutClient(ident, userId, null, false, false, null);
    }

    public Ice.AsyncResult begin_logoutClient(Ice.Identity ident, String userId, java.util.Map<String, String> __ctx)
    {
        return begin_logoutClient(ident, userId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_logoutClient(Ice.Identity ident, String userId, Ice.Callback __cb)
    {
        return begin_logoutClient(ident, userId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_logoutClient(Ice.Identity ident, String userId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_logoutClient(ident, userId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_logoutClient(Ice.Identity ident, String userId, Callback_Tom_logoutClient __cb)
    {
        return begin_logoutClient(ident, userId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_logoutClient(Ice.Identity ident, String userId, java.util.Map<String, String> __ctx, Callback_Tom_logoutClient __cb)
    {
        return begin_logoutClient(ident, userId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_logoutClient(Ice.Identity ident, 
                                              String userId, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_logoutClient(ident, userId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_logoutClient(Ice.Identity ident, 
                                              String userId, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_logoutClient(ident, userId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_logoutClient(Ice.Identity ident, 
                                              String userId, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_logoutClient(ident, userId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_logoutClient(Ice.Identity ident, 
                                              String userId, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_logoutClient(ident, userId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_logoutClient(Ice.Identity ident, 
                                               String userId, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_logoutClient(ident, 
                                  userId, 
                                  __ctx, 
                                  __explicitCtx, 
                                  __synchronous, 
                                  new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_logoutClient(Ice.Identity ident, 
                                               String userId, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__logoutClient_name, __cb);
        try
        {
            __result.prepare(__logoutClient_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Ice.Identity.__write(__os, ident);
            __os.writeString(userId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_logoutClient(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __logoutClient_name);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static TomPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), TomPrx.class, TomPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static TomPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), TomPrx.class, TomPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static TomPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), TomPrx.class, TomPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static TomPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), TomPrx.class, TomPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static TomPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, TomPrx.class, TomPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static TomPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, TomPrx.class, TomPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Demo::Tom",
        "::Ice::Object"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[0];
    }

    public static void __write(IceInternal.BasicStream __os, TomPrx v)
    {
        __os.writeProxy(v);
    }

    public static TomPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            TomPrxHelper result = new TomPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
